import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get BGTimerGo => "K den!";
  String get FGTimerDone => "Done!";
  String get FGTimerGo => "Go!";
  String get choseToDrink => " chose to drink instead.";
  String get comingSoon => "Coming soon!";
  String get compareThis => "Just between you and me (and the others),";
  String get comparisonDraw => "It's a draw!";
  String get createRoom => "Create a game";
  String get gameAlreadyRunning => "Sorry, but there's already a game being played here.";
  String get hasLeftGame => " has left the game.";
  String get isNewGM => " is the new GM.";
  String get joinRoom => "Join a game";
  String get languageSelector => "Please select the language:";
  String get listFailedStyle1 => "Dunno";
  String get listThis => "List the following:";
  String get mimeThis => "Pantomime this:";
  String get modeSelector => "Please select the gamemode:";
  String get modeTitle_endless => "Endless";
  String get modeTitle_headline => "Please select your gamemode:";
  String get modeTitle_lose => "Lose points";
  String get modeTitle_reach => "Gather points";
  String get noPlayersYet => "No players yet!";
  String get noStyle1 => "Just no.";
  String get noStyle2 => "I don't wanna";
  String get ownTurn => "Your turn!";
  String get pleaseCompleteEntries => "Please complete your entries.";
  String get pleaseEnterValidNumber => "Please enter a valid number.";
  String get sexFemale => "Female";
  String get sexMale => "Male";
  String get sexX => "Other";
  String get tabooMimeFailStyle1 => "Nobody knows";
  String get tabooMimeGuessp1 => "What is ";
  String get tabooMimeGuessp2 => " trying to tell us?";
  String get tabooMimeWinStyle1 => "There we go!";
  String get taboop1 => "Explain \"";
  String get taboop2 => "\" without using the following words:";
  String get turn => "s turn";
  String get waitingForOthersToInput => "Waiting for the others to input..";
  String get yesStyle1 => "Yessir!";
}

class $de extends S {
  const $de();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get pleaseCompleteEntries => "Bitte vervollständige deine Angaben.";
  @override
  String get taboop1 => "Beschreibe \"";
  @override
  String get pleaseEnterValidNumber => "Bitte gib eine korrekte Zahl an.";
  @override
  String get taboop2 => "\" ohne folgende Wörter zu benutzen:";
  @override
  String get sexX => "Divers";
  @override
  String get modeTitle_reach => "Punkte sammeln";
  @override
  String get turn => " ist am Zug";
  @override
  String get waitingForOthersToInput => "Warte auf Eingaben der anderen Spieler..";
  @override
  String get compareThis => "Mal unter uns beiden (und den anderen),";
  @override
  String get tabooMimeWinStyle1 => "Geht doch!";
  @override
  String get noStyle2 => "I mog net";
  @override
  String get noStyle1 => "Nö.";
  @override
  String get gameAlreadyRunning => "Sorry, aber hier wird bereits gespielt.";
  @override
  String get sexMale => "Männlein";
  @override
  String get joinRoom => "Tritt einem Spiel bei";
  @override
  String get FGTimerDone => "Fertig!";
  @override
  String get comparisonDraw => "Unentschieden!";
  @override
  String get isNewGM => " ist der neue GM.";
  @override
  String get FGTimerGo => "Los!";
  @override
  String get languageSelector => "Bitte wähle die Sprache:";
  @override
  String get modeTitle_endless => "Endlos";
  @override
  String get sexFemale => "Weiblein";
  @override
  String get modeTitle_lose => "Punkte loswerden";
  @override
  String get listThis => "Listet folgendes auf:";
  @override
  String get modeTitle_headline => "Bitte wähle euren Spielmodus aus:";
  @override
  String get hasLeftGame => " hat das Spiel verlassen.";
  @override
  String get createRoom => "Erstelle ein Spiel";
  @override
  String get tabooMimeGuessp1 => "Was will ";
  @override
  String get choseToDrink => " wollte stattdessen lieber trinken.";
  @override
  String get tabooMimeGuessp2 => " uns sagen?";
  @override
  String get comingSoon => "Kommt demnächst!";
  @override
  String get tabooMimeFailStyle1 => "Keiner n Plan";
  @override
  String get mimeThis => "Pantomimimi folgendes:";
  @override
  String get BGTimerGo => "Auffi!";
  @override
  String get ownTurn => "Du bist am Zug!";
  @override
  String get noPlayersYet => "Noch keine Spieler vorhanden!";
  @override
  String get yesStyle1 => "Jawollek!";
  @override
  String get listFailedStyle1 => "Kein Plan";
  @override
  String get modeSelector => "Bitte wähle den Spielmodus:";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("de", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "de":
          S.current = const $de();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
